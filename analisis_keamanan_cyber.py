# -*- coding: utf-8 -*-
"""Analisis keamanan cyber

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1-6RXkkIcoUABnLuZwjcnkx6m-VVFG4OC

# Analisis keamanan cyber

### Import library
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.stats import spearmanr

df = pd.read_csv('/content/cybersecurity_attacks.csv')

"""### jenis data pada masing-masing variabel dalam suatu dataset"""

df.head()

df.info()

df.describe()

df.nunique()

df.isnull().sum()

df['Malware Indicators'].fillna(df['Malware Indicators'].mode()[0], inplace=True)
df['Alerts/Warnings'].fillna(df['Alerts/Warnings'].mode()[0], inplace=True)
df['Proxy Information'].fillna(df['Proxy Information'].mode()[0], inplace=True)
df['Firewall Logs'].fillna(df['Firewall Logs'].mode()[0], inplace=True)
df['IDS/IPS Alerts'].fillna(df['IDS/IPS Alerts'].mode()[0], inplace=True)

df.isnull().sum()

"""Analisis Korelasi:"""

matriks_korelasi = df.corr()
sns.heatmap(matriks_korelasi, annot=True, cmap='coolwarm')
plt.show()

"""#Identifikasi serangan yang paling umum dengan menganalisis variabel seperti Attack Type dan Attack Signature."""

attack_counts = df['Attack Type'].value_counts()
colors = sns.color_palette('inferno', len(attack_counts))

# Plotting
plt.figure(figsize=(12,6))
sns.barplot(x=attack_counts.index, y=attack_counts, palette=colors)

# Adding data labels
for i, count in enumerate(attack_counts):
    plt.text(i, count + 0.1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

# Adding labels and title
plt.xlabel('Attack Type', fontsize=14, fontweight='bold')
plt.ylabel('Counts', fontsize=14, fontweight='bold')
plt.title('Distribution of Attack Types', fontsize=16)

# Rotating x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

# Frekuensi Kemunculan Attack Type
df.groupby('Attack Type').size().plot(kind='barh', color=sns.color_palette('Dark2'))
plt.gca().spines[['top', 'right']].set_visible(False)

plt.title('Frekuensi Kemunculan Attack Type')
plt.xlabel('Frekuensi')
plt.ylabel('Attack Type')

plt.show()

# Frekuensi Kemunculan Attack Signature
df.groupby('Attack Signature').size().plot(kind='barh', color=sns.color_palette('Dark2'))
plt.gca().spines[['top', 'right']].set_visible(False)

plt.title('Frekuensi Kemunculan Attack Signature')
plt.xlabel('Frekuensi')
plt.ylabel('Attack Signature')

plt.show()

"""####Tren Frekuensi Attack Type per Tahun"""

df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Extract year information from the 'Timestamp' column
df['Year'] = df['Timestamp'].dt.year.astype(str)

# Hitung frekuensi Attack Type per tahun
attack_type_frequency = df.groupby(['Year', 'Attack Type']).size().unstack().fillna(0)

# Plotting line plot
plt.figure(figsize=(12, 6))
sns.lineplot(data=attack_type_frequency, markers=True, dashes=False)
plt.title('Tren Frekuensi Attack Type per Tahun')
plt.xlabel('Tahun')
plt.ylabel('Frekuensi')
plt.legend(title='Attack Type', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Attack Type paling umum
most_common_attack_type = df['Attack Type'].value_counts().idxmax()
print(f"Attack Type paling umum: {most_common_attack_type}")

"""####Tren Frekuensi Attack Signature per Tahun"""

df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Extract year information from the 'Timestamp' column
df['Year'] = df['Timestamp'].dt.year.astype(str)

# Hitung frekuensi Attack Signature per tahun
attack_type_frequency = df.groupby(['Year', 'Attack Signature']).size().unstack().fillna(0)

# Plotting line plot
plt.figure(figsize=(12, 6))
sns.lineplot(data=attack_type_frequency, markers=True, dashes=False)
plt.title('Tren Frekuensi Attack Signature per Tahun')
plt.xlabel('Tahun')
plt.ylabel('Frekuensi')
plt.legend(title='Attack Signature', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

# Attack Signature paling umum
most_common_attack_signature = df['Attack Signature'].value_counts().idxmax()
print(f"Attack Signature paling umum: {most_common_attack_signature}")

"""###Evaluasi tingkat keparahan serangan dengan menganalisis Severity Level.

Analisis Frekuensi Tingkat Keparahan:
"""

attack_counts = df['Severity Level'].value_counts()
colors = sns.color_palette('Spectral', len(attack_counts))

# Plotting
plt.figure(figsize=(12,6))
sns.barplot(x=attack_counts.index, y=attack_counts, palette=colors)

# Adding data labels
for i, count in enumerate(attack_counts):
    plt.text(i, count + 0.1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

# Adding labels and title
plt.xlabel('Severity Level', fontsize=14, fontweight='bold')
plt.ylabel('Counts', fontsize=14, fontweight='bold')
plt.title('Distribution of Severity Levels', fontsize=16)

# Rotating x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

# Statistik deskriptif untuk tingkat keparahan
severity_statistics = df['Severity Level'].describe()
print(severity_statistics)

from scipy.stats import chi2_contingency

contingency_table = pd.crosstab(df['Severity Level'], df['Attack Type'])
chi2, p, _, _ = chi2_contingency(contingency_table)

print(f"Chi-squared value: {chi2}")
print(f"P-value: {p}")

# Box plot untuk tingkat keparahan
plt.figure(figsize=(10, 6))
sns.set_theme(style="ticks", palette="Spectral")
sns.boxplot(x='Severity Level', y='Anomaly Scores', data=df)
plt.title('Box Plot Tingkat Keparahan vs Anomaly Scores')
plt.xlabel('Tingkat Keparahan')
plt.ylabel('Anomaly Scores')
plt.show()

# Contoh: Time series plot untuk tingkat keparahan
df['Timestamp'] = pd.to_datetime(df['Timestamp'])

# Extract year information from the 'Timestamp' column
df['Year'] = df['Timestamp'].dt.year.astype(str)

# Hitung frekuensi Severity Level per tahun
severity_Level_frequency = df.groupby(['Year', 'Severity Level']).size().unstack().fillna(0)

plt.figure(figsize=(12, 6))
sns.lineplot(data=severity_Level_frequency, markers=True, dashes=False)
plt.title('Time Series Tingkat Keparahan Serangan')
plt.xlabel('Timestamp')
plt.ylabel('Tingkat Keparahan')
plt.show()

# Severity Level paling tinggi
most_common_attack_type = df.groupby(['Year', 'Severity Level']).size().idxmax()
# df[['Year', 'Severity Level']]
print(f"Severity Level paling tinggi: {most_common_attack_type}")

"""#Analisis Anomali"""

# Box plot untuk 'Anomaly Scores' berdasarkan 'Attack Type'

correlation_with_attack_type = df[['Anomaly Scores', 'Attack Type']].corr()


plt.figure(figsize=(8, 6))
sns.heatmap(correlation_with_attack_type, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Korelasi antara Anomaly Scores dan Jenis Serangan')
plt.show()

# Contoh: Jika Anomaly Scores dan Attack Type tersedia dalam DataFrame 'cybersecurity_data'
plt.figure(figsize=(12, 6))

# Memvisualisasikan distribusi Anomaly Scores
sns.histplot(data=df, x='Anomaly Scores', hue='Attack Type', bins=30, kde=True, alpha=0.7)

plt.title('Distribusi Anomaly Scores berdasarkan Attack Type')
plt.xlabel('Anomaly Scores')
plt.ylabel('Frekuensi')
plt.legend(title='Attack Type', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.show()

attack_counts = df['Attack Type'].value_counts()
colors = sns.color_palette('Spectral', len(attack_counts))

# Plotting
plt.figure(figsize=(12,6))
sns.barplot(x=attack_counts.index, y=attack_counts, palette=colors)

# Adding data labels
for i, count in enumerate(attack_counts):
    plt.text(i, count + 0.1, str(count), ha='center', va='bottom', fontsize=10, fontweight='bold')

# Adding labels and title
plt.xlabel('Attack Type', fontsize=14, fontweight='bold')
plt.ylabel('Counts', fontsize=14, fontweight='bold')
plt.title('Distribution of Attack Types', fontsize=16)

# Rotating x-axis labels for better readability
plt.xticks(rotation=45, ha='right')

# Display the plot
plt.tight_layout()
plt.show()

from scipy.stats import kruskal

# Contoh: Jika 'Attack Type' dan 'Anomaly Scores' tersedia dalam DataFrame 'cybersecurity_data'
result = kruskal(*[group['Anomaly Scores'] for name, group in df.groupby('Attack Type')])

print("Hasil Uji Kruskal-Wallis:")
print(result)

from scipy.stats import chi2_contingency

# Contoh: Jika 'Attack Type' dan 'Anomaly Scores' tersedia dalam DataFrame 'cybersecurity_data'
contingency_table = pd.crosstab(df['Attack Type'], df['Anomaly Scores'])
chi2, p, _, _ = chi2_contingency(contingency_table)

print(f"Chi-squared value: {chi2}")
print(f"P-value: {p}")